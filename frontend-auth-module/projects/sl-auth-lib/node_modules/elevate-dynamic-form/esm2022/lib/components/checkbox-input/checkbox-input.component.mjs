import { Component, Input } from '@angular/core';
import { FormArray, FormControl, NG_VALUE_ACCESSOR, } from '@angular/forms';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@angular/common";
import * as i3 from "@angular/material/checkbox";
export class CheckboxInputComponent {
    constructor(fb) {
        this.fb = fb;
        this.touched = false;
        this.form = this.fb.group({});
        this.stateChanges = new Subject();
        this.onChange = (value) => { };
        this.onTouched = () => { };
    }
    ngOnInit() {
        let value = this.checkboxControl.value;
        let optionsControl = this.checkboxControl.options.map((data) => {
            if (value &&
                value.find((val) => {
                    return val.label == data.label;
                })) {
                return new FormControl(data);
            }
            else {
                return new FormControl('');
            }
        });
        this.form.addControl(this.checkboxControl.name, new FormArray(optionsControl));
        this.form
            .get(this.checkboxControl.name)
            ?.valueChanges.subscribe((value) => {
            let selectedValues = value.filter((val) => {
                return val;
            });
            if (!selectedValues.length) {
                this.onChange('');
            }
            else {
                this.onChange(selectedValues);
            }
            this.stateChanges.next();
        });
    }
    writeValue(value) {
        this.selectedOptions = '';
    }
    registerOnChange(onChange) {
        this.onChange = onChange;
    }
    registerOnTouched(onTouched) {
        this.onTouched = onTouched;
    }
    markAsTouched() {
        if (!this.touched) {
            this.onTouched();
            this.touched = true;
        }
    }
    onCheckboxChange(event, option, index) {
        let currentControl = this.form.get(this.checkboxControl.name);
        if (event.checked) {
            currentControl.controls[index].patchValue(option);
        }
        else {
            currentControl.controls[index].patchValue('');
        }
        this.markAsTouched();
    }
    ngOnDestroy() {
        this.stateChanges.complete();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.8", ngImport: i0, type: CheckboxInputComponent, deps: [{ token: i1.FormBuilder }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.8", type: CheckboxInputComponent, selector: "lib-checkbox-input", inputs: { checkboxControl: "checkboxControl" }, providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: CheckboxInputComponent,
                multi: true,
            },
        ], ngImport: i0, template: "<div [formGroup]=\"form\" style=\"margin-top: 10px\">\n  <div\n    *ngFor=\"let option of checkboxControl?.options; let idx = index\"\n    [formArrayName]=\"checkboxControl?.name\"\n  >\n    <mat-checkbox\n      [formControlName]=\"idx\"\n      [value]=\"option.value\"\n      (change)=\"onCheckboxChange($event, option, idx)\"\n    >\n      {{ option?.label }}\n    </mat-checkbox>\n  </div>\n</div>\n", styles: [""], dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i1.FormArrayName, selector: "[formArrayName]", inputs: ["formArrayName"] }, { kind: "component", type: i3.MatCheckbox, selector: "mat-checkbox", inputs: ["aria-label", "aria-labelledby", "aria-describedby", "id", "required", "labelPosition", "name", "value", "disableRipple", "tabIndex", "color", "checked", "disabled", "indeterminate"], outputs: ["change", "indeterminateChange"], exportAs: ["matCheckbox"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.8", ngImport: i0, type: CheckboxInputComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-checkbox-input', providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: CheckboxInputComponent,
                            multi: true,
                        },
                    ], template: "<div [formGroup]=\"form\" style=\"margin-top: 10px\">\n  <div\n    *ngFor=\"let option of checkboxControl?.options; let idx = index\"\n    [formArrayName]=\"checkboxControl?.name\"\n  >\n    <mat-checkbox\n      [formControlName]=\"idx\"\n      [value]=\"option.value\"\n      (change)=\"onCheckboxChange($event, option, idx)\"\n    >\n      {{ option?.label }}\n    </mat-checkbox>\n  </div>\n</div>\n" }]
        }], ctorParameters: () => [{ type: i1.FormBuilder }], propDecorators: { checkboxControl: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3gtaW5wdXQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvZHluYW1pYy1mb3JtL3NyYy9saWIvY29tcG9uZW50cy9jaGVja2JveC1pbnB1dC9jaGVja2JveC1pbnB1dC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9keW5hbWljLWZvcm0vc3JjL2xpYi9jb21wb25lbnRzL2NoZWNrYm94LWlucHV0L2NoZWNrYm94LWlucHV0LmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQ3pELE9BQU8sRUFFTCxTQUFTLEVBRVQsV0FBVyxFQUVYLGlCQUFpQixHQUNsQixNQUFNLGdCQUFnQixDQUFDO0FBQ3hCLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7Ozs7O0FBYy9CLE1BQU0sT0FBTyxzQkFBc0I7SUFRakMsWUFBb0IsRUFBZTtRQUFmLE9BQUUsR0FBRixFQUFFLENBQWE7UUFMbkMsWUFBTyxHQUFZLEtBQUssQ0FBQztRQUV6QixTQUFJLEdBQWMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDcEMsaUJBQVksR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFDO1FBSW5DLGFBQVEsR0FBRyxDQUFDLEtBQVUsRUFBRSxFQUFFLEdBQUUsQ0FBQyxDQUFDO1FBRTlCLGNBQVMsR0FBRyxHQUFHLEVBQUUsR0FBRSxDQUFDLENBQUM7SUFKaUIsQ0FBQztJQU12QyxRQUFRO1FBQ04sSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUM7UUFDdkMsSUFBSSxjQUFjLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBUyxFQUFF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RSxpQkFBaUI7NEJBQzFCLFdBQVcsd0JBQXdCOzRCQUNuQyxLQUFLLEVBQUUsSUFBSTt5QkFDWjtxQkFDRjtnRkFHUSxlQUFlO3NCQUF2QixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBDb250cm9sVmFsdWVBY2Nlc3NvcixcbiAgRm9ybUFycmF5LFxuICBGb3JtQnVpbGRlcixcbiAgRm9ybUNvbnRyb2wsXG4gIEZvcm1Hcm91cCxcbiAgTkdfVkFMVUVfQUNDRVNTT1IsXG59IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbGliLWNoZWNrYm94LWlucHV0JyxcbiAgdGVtcGxhdGVVcmw6ICcuL2NoZWNrYm94LWlucHV0LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vY2hlY2tib3gtaW5wdXQuY29tcG9uZW50LmNzcyddLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICAgIHVzZUV4aXN0aW5nOiBDaGVja2JveElucHV0Q29tcG9uZW50LFxuICAgICAgbXVsdGk6IHRydWUsXG4gICAgfSxcbiAgXSxcbn0pXG5leHBvcnQgY2xhc3MgQ2hlY2tib3hJbnB1dENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQ29udHJvbFZhbHVlQWNjZXNzb3Ige1xuICBASW5wdXQoKSBjaGVja2JveENvbnRyb2w6IGFueTtcbiAgc2VsZWN0ZWRPcHRpb25zOiBhbnk7XG4gIHRvdWNoZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBmb3JtOiBGb3JtR3JvdXAgPSB0aGlzLmZiLmdyb3VwKHt9KTtcbiAgc3RhdGVDaGFuZ2VzID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGZiOiBGb3JtQnVpbGRlcikge31cblxuICBvbkNoYW5nZSA9ICh2YWx1ZTogYW55KSA9PiB7fTtcblxuICBvblRvdWNoZWQgPSAoKSA9PiB7fTtcblxuICBuZ09uSW5pdCgpIHtcbiAgICBsZXQgdmFsdWUgPSB0aGlzLmNoZWNrYm94Q29udHJvbC52YWx1ZTtcbiAgICBsZXQgb3B0aW9uc0NvbnRyb2wgPSB0aGlzLmNoZWNrYm94Q29udHJvbC5vcHRpb25zLm1hcCgoZGF0YTogYW55KSA9PiB7XG4gICAgICBpZiAoXG4gICAgICAgIHZhbHVlICYmXG4gICAgICAgIHZhbHVlLmZpbmQoKHZhbDogYW55KSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHZhbC5sYWJlbCA9PSBkYXRhLmxhYmVsO1xuICAgICAgICB9KVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBuZXcgRm9ybUNvbnRyb2woZGF0YSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IEZvcm1Db250cm9sKCcnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLmZvcm0uYWRkQ29udHJvbChcbiAgICAgIHRoaXMuY2hlY2tib3hDb250cm9sLm5hbWUsXG4gICAgICBuZXcgRm9ybUFycmF5KG9wdGlvbnNDb250cm9sKVxuICAgICk7XG4gICAgdGhpcy5mb3JtXG4gICAgICAuZ2V0KHRoaXMuY2hlY2tib3hDb250cm9sLm5hbWUpXG4gICAgICA/LnZhbHVlQ2hhbmdlcy5zdWJzY3JpYmUoKHZhbHVlKSA9PiB7XG4gICAgICAgIGxldCBzZWxlY3RlZFZhbHVlcyA9IHZhbHVlLmZpbHRlcigodmFsOiBhbnkpID0+IHtcbiAgICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFzZWxlY3RlZFZhbHVlcy5sZW5ndGgpIHtcbiAgICAgICAgICB0aGlzLm9uQ2hhbmdlKCcnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLm9uQ2hhbmdlKHNlbGVjdGVkVmFsdWVzKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN0YXRlQ2hhbmdlcy5uZXh0KCk7XG4gICAgICB9KTtcbiAgfVxuXG4gIHdyaXRlVmFsdWUodmFsdWU6IGFueSkge1xuICAgIHRoaXMuc2VsZWN0ZWRPcHRpb25zID0gJyc7XG4gIH1cblxuICByZWdpc3Rlck9uQ2hhbmdlKG9uQ2hhbmdlOiBhbnkpIHtcbiAgICB0aGlzLm9uQ2hhbmdlID0gb25DaGFuZ2U7XG4gIH1cblxuICByZWdpc3Rlck9uVG91Y2hlZChvblRvdWNoZWQ6IGFueSkge1xuICAgIHRoaXMub25Ub3VjaGVkID0gb25Ub3VjaGVkO1xuICB9XG5cbiAgbWFya0FzVG91Y2hlZCgpIHtcbiAgICBpZiAoIXRoaXMudG91Y2hlZCkge1xuICAgICAgdGhpcy5vblRvdWNoZWQoKTtcbiAgICAgIHRoaXMudG91Y2hlZCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgb25DaGVja2JveENoYW5nZShldmVudDogYW55LCBvcHRpb246IGFueSwgaW5kZXg6IGFueSkge1xuICAgIGxldCBjdXJyZW50Q29udHJvbCA9IHRoaXMuZm9ybS5nZXQodGhpcy5jaGVja2JveENvbnRyb2wubmFtZSkgYXMgRm9ybUFycmF5O1xuICAgIGlmIChldmVudC5jaGVja2VkKSB7XG4gICAgICBjdXJyZW50Q29udHJvbC5jb250cm9sc1tpbmRleF0ucGF0Y2hWYWx1ZShvcHRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50Q29udHJvbC5jb250cm9sc1tpbmRleF0ucGF0Y2hWYWx1ZSgnJyk7XG4gICAgfVxuICAgIHRoaXMubWFya0FzVG91Y2hlZCgpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5zdGF0ZUNoYW5nZXMuY29tcGxldGUoKTtcbiAgfVxufVxuIiwiPGRpdiBbZm9ybUdyb3VwXT1cImZvcm1cIiBzdHlsZT1cIm1hcmdpbi10b3A6IDEwcHhcIj5cbiAgPGRpdlxuICAgICpuZ0Zvcj1cImxldCBvcHRpb24gb2YgY2hlY2tib3hDb250cm9sPy5vcHRpb25zOyBsZXQgaWR4ID0gaW5kZXhcIlxuICAgIFtmb3JtQXJyYXlOYW1lXT1cImNoZWNrYm94Q29udHJvbD8ubmFtZVwiXG4gID5cbiAgICA8bWF0LWNoZWNrYm94XG4gICAgICBbZm9ybUNvbnRyb2xOYW1lXT1cImlkeFwiXG4gICAgICBbdmFsdWVdPVwib3B0aW9uLnZhbHVlXCJcbiAgICAgIChjaGFuZ2UpPVwib25DaGVja2JveENoYW5nZSgkZXZlbnQsIG9wdGlvbiwgaWR4KVwiXG4gICAgPlxuICAgICAge3sgb3B0aW9uPy5sYWJlbCB9fVxuICAgIDwvbWF0LWNoZWNrYm94PlxuICA8L2Rpdj5cbjwvZGl2PlxuIl19