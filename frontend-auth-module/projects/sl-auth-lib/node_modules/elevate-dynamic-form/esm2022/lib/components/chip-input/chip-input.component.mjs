import { Component, Input } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { DialogInputComponent } from '../dialog-input/dialog-input.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as i2 from "@angular/common";
import * as i3 from "@angular/forms";
import * as i4 from "@angular/material/icon";
import * as i5 from "@angular/material/chips";
import * as i6 from "@angular/material/slide-toggle";
export class ChipInputComponent {
    constructor(diaglog) {
        this.diaglog = diaglog;
        this.enableSelectAll = false;
        this.touched = false;
        this.onChange = (value) => { };
        this.onTouched = () => { };
    }
    ngOnInit() { }
    writeValue(value) {
        this.selectedChips = new Set();
        this.chipControl.options.map((chipItem) => {
            if (value) {
                value.forEach((val) => {
                    if (val.value == chipItem.value) {
                        this.selectedChips.add(chipItem);
                    }
                });
            }
        });
        if (this.selectedChips.size === this.chipControl.options.length) {
            this.enableSelectAll = true;
        }
    }
    registerOnChange(onChange) {
        this.onChange = onChange;
    }
    registerOnTouched(onTouched) {
        this.onTouched = onTouched;
    }
    markAsTouched() {
        if (!this.touched) {
            this.onTouched();
            this.touched = true;
        }
    }
    onChipClick(chip) {
        this.markAsTouched();
        if (this.selectedChips.has(chip)) {
            this.selectedChips.delete(chip);
        }
        else {
            this.selectedChips.add(chip);
        }
        if (this.selectedChips.size) {
            this.onChange([...this.selectedChips]);
        }
        else {
            this.onChange([]);
        }
        this.enableSelectAll =
            this.selectedChips.size == this.chipControl.options.length;
    }
    addOption() {
        const dialogRef = this.diaglog.open(DialogInputComponent, {
            data: {
                header: this.chipControl.meta.addNewPopupHeader,
                label: this.chipControl.meta.addNewPopupSubHeader,
                required: true,
                maxLength: 20,
                buttonText: {
                    ok: 'Add',
                    cancel: 'Cancel',
                },
            },
            width: '450px',
        });
        dialogRef.afterClosed().subscribe((data) => {
            if (data && data !== '') {
                let newOption = {
                    label: data,
                    value: data,
                };
                this.chipControl.options.push(newOption);
                this.onChipClick(newOption);
            }
        });
    }
    toggleSelectAll() {
        this.markAsTouched();
        if (this.enableSelectAll) {
            this.chipControl.options.map((chipItem) => {
                this.selectedChips.add(chipItem);
            });
        }
        else {
            this.selectedChips.clear();
        }
        if (this.selectedChips.size) {
            this.onChange([...this.selectedChips]);
        }
        else {
            this.onChange([]);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.8", ngImport: i0, type: ChipInputComponent, deps: [{ token: i1.MatDialog }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.8", type: ChipInputComponent, selector: "lib-chip-input", inputs: { chipControl: "chipControl" }, providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: ChipInputComponent,
                multi: true,
            },
        ], ngImport: i0, template: "<mat-chip-listbox\n  #chipList\n  [multiple]=\"chipControl?.multiple\"\n  [required]=\"chipControl?.validators?.required\"\n  style=\"margin-top: 10px\"\n>\n  <div class=\"chip-options-list\">\n    <mat-chip-option\n      *ngFor=\"let chip of chipControl?.options\"\n      [value]=\"chip.value\"\n      (click)=\"onChipClick(chip)\"\n      [selected]=\"this.selectedChips.has(chip)\"\n    >\n      <div>{{ chip?.label }}</div>\n      <mat-icon\n        matChipRemove\n        *ngIf=\"this.selectedChips.has(chip)\"\n        (click)=\"onChipClick(chip)\"\n      >\n        cancel\n      </mat-icon>\n    </mat-chip-option>\n    <mat-chip\n      *ngIf=\"chipControl?.meta?.showAddOption\"\n      (click)=\"addOption()\"\n      style=\"cursor: pointer\"\n    >\n      <mat-icon>add_circle</mat-icon> Add\n    </mat-chip>\n  </div>\n  <mat-slide-toggle\n    *ngIf=\"chipControl?.meta?.showSelectAll\"\n    [(ngModel)]=\"enableSelectAll\"\n    (change)=\"toggleSelectAll()\"\n  ></mat-slide-toggle>\n</mat-chip-listbox>\n", styles: [".chip-options-list{display:flex;flex-direction:row;flex:1;flex-wrap:wrap}\n"], dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i4.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "component", type: i5.MatChip, selector: "mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]", inputs: ["role", "id", "aria-label", "aria-description", "value", "color", "removable", "highlighted", "disableRipple", "disabled", "tabIndex"], outputs: ["removed", "destroyed"], exportAs: ["matChip"] }, { kind: "component", type: i5.MatChipListbox, selector: "mat-chip-listbox", inputs: ["multiple", "aria-orientation", "selectable", "compareWith", "required", "hideSingleSelectionIndicator", "value"], outputs: ["change"] }, { kind: "component", type: i5.MatChipOption, selector: "mat-basic-chip-option, [mat-basic-chip-option], mat-chip-option, [mat-chip-option]", inputs: ["selectable", "selected"], outputs: ["selectionChange"] }, { kind: "directive", type: i5.MatChipRemove, selector: "[matChipRemove]" }, { kind: "component", type: i6.MatSlideToggle, selector: "mat-slide-toggle", inputs: ["name", "id", "labelPosition", "aria-label", "aria-labelledby", "aria-describedby", "required", "color", "disabled", "disableRipple", "tabIndex", "checked", "hideIcon"], outputs: ["change", "toggleChange"], exportAs: ["matSlideToggle"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.8", ngImport: i0, type: ChipInputComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-chip-input', providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: ChipInputComponent,
                            multi: true,
                        },
                    ], template: "<mat-chip-listbox\n  #chipList\n  [multiple]=\"chipControl?.multiple\"\n  [required]=\"chipControl?.validators?.required\"\n  style=\"margin-top: 10px\"\n>\n  <div class=\"chip-options-list\">\n    <mat-chip-option\n      *ngFor=\"let chip of chipControl?.options\"\n      [value]=\"chip.value\"\n      (click)=\"onChipClick(chip)\"\n      [selected]=\"this.selectedChips.has(chip)\"\n    >\n      <div>{{ chip?.label }}</div>\n      <mat-icon\n        matChipRemove\n        *ngIf=\"this.selectedChips.has(chip)\"\n        (click)=\"onChipClick(chip)\"\n      >\n        cancel\n      </mat-icon>\n    </mat-chip-option>\n    <mat-chip\n      *ngIf=\"chipControl?.meta?.showAddOption\"\n      (click)=\"addOption()\"\n      style=\"cursor: pointer\"\n    >\n      <mat-icon>add_circle</mat-icon> Add\n    </mat-chip>\n  </div>\n  <mat-slide-toggle\n    *ngIf=\"chipControl?.meta?.showSelectAll\"\n    [(ngModel)]=\"enableSelectAll\"\n    (change)=\"toggleSelectAll()\"\n  ></mat-slide-toggle>\n</mat-chip-listbox>\n", styles: [".chip-options-list{display:flex;flex-direction:row;flex:1;flex-wrap:wrap}\n"] }]
        }], ctorParameters: () => [{ type: i1.MatDialog }], propDecorators: { chipControl: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,