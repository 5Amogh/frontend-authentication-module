import { Component, Input, ViewChild } from '@angular/core';
import { Validators } from '@angular/forms';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@angular/common";
import * as i3 from "@angular/material/input";
import * as i4 from "@angular/material/form-field";
import * as i5 from "@angular/material/icon";
import * as i6 from "@angular/material/select";
import * as i7 from "@angular/material/core";
import * as i8 from "@angular/material/slide-toggle";
import * as i9 from "@angular/material/slider";
import * as i10 from "../chip-input/chip-input.component";
import * as i11 from "../radio-input/radio-input.component";
import * as i12 from "../checkbox-input/checkbox-input.component";
import * as i13 from "../star-rating/star-rating.component";
// const CUSTOM_DATE_FORMATS: NgxMatDateFormats = {
//   parse: {
//     dateInput: 'DD/MM/YYYY',
//   },
//   display: {
//     dateInput: 'LL LT',
//     monthYearLabel: 'MMM YYYY',
//     dateA11yLabel: 'LL',
//     monthYearA11yLabel: 'MMM YYYY',
//   },
// };
export class MainFormComponent {
    constructor(fb) {
        this.fb = fb;
        this.myForm = this.fb.group({});
        this.showSpinners = true;
        this.showSeconds = false;
        this.touchUi = false;
        this.enableMeridian = true;
        this.stepHour = 1;
        this.stepMinute = 1;
        this.stepSecond = 1;
        this.color = 'warn';
        this.currentDate = new Date();
        this.maxDate = new Date(this.currentDate.getFullYear() + 10, this.currentDate.getMonth(), this.currentDate.getDate());
        this.dependedChildDate = '';
    }
    ngOnInit() {
        this.createForm(this.formJson);
    }
    createForm(controls) {
        for (const control of controls) {
            const validatorsToAdd = [];
            for (const [key, value] of Object.entries(control.validators)) {
                switch (key) {
                    case 'min':
                        validatorsToAdd.push(Validators.min(value));
                        break;
                    case 'max':
                        validatorsToAdd.push(Validators.max(value));
                        break;
                    case 'required':
                        if (value) {
                            validatorsToAdd.push(Validators.required);
                        }
                        break;
                    case 'requiredTrue':
                        if (value) {
                            validatorsToAdd.push(Validators.requiredTrue);
                        }
                        break;
                    case 'email':
                        if (value) {
                            validatorsToAdd.push(Validators.email);
                        }
                        break;
                    case 'minLength':
                        validatorsToAdd.push(Validators.minLength(value));
                        break;
                    case 'maxLength':
                        validatorsToAdd.push(Validators.maxLength(value));
                        break;
                    case 'pattern':
                        validatorsToAdd.push(Validators.pattern(value));
                        break;
                    case 'nullValidator':
                        if (value) {
                            validatorsToAdd.push(Validators.nullValidator);
                        }
                        break;
                    default:
                        break;
                }
            }
            this.myForm.addControl(control.name, this.fb.control({ value: control.value, disabled: control.disabled || false }, validatorsToAdd));
        }
    }
    dateSelected(event, control) {
        const indexToEdit = this.formJson.findIndex((formControl) => formControl.name === control.name);
        if (indexToEdit !== -1) {
            this.formJson[indexToEdit].value = event.value;
        }
        if (control.dependedChild) {
            this.dependedChild = control.dependedChild;
            this.dependedChildDate = event.value;
        }
        else {
            this.dependedParent = control.dependedParent;
            this.dependedParentDate = event.value;
        }
    }
    // dateInputClick(control: any, datetimePicker: NgxMatDatetimepicker<any>) {
    //   if (this.myForm.get(control.name)?.value)
    //     datetimePicker._applyPendingSelection = this.myForm.get(control.name)?.value;
    //   datetimePicker.open();
    // }
    togglePasswordVisibility(control) {
        control.type = control.type === 'password' ? 'text' : 'password';
        control.showPasswordIcon = true;
    }
    compareWith(value1, value2) {
        return JSON.stringify(value1.value) == JSON.stringify(value2);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.8", ngImport: i0, type: MainFormComponent, deps: [{ token: i1.FormBuilder }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.8", type: MainFormComponent, selector: "dynamic-form", inputs: { formJson: "formJson" }, viewQueries: [{ propertyName: "picker", first: true, predicate: ["picker"], descendants: true }], ngImport: i0, template: "<div>\n  <form [formGroup]=\"myForm\">\n    <div *ngFor=\"let control of formJson\">\n      <mat-form-field\n        *ngIf=\"control?.type === 'text' || control?.type === 'password'\"\n        floatLabel=\"always\"\n      >\n        <mat-label>{{ control?.label }}</mat-label>\n        <input\n          matInput\n          [placeholder]=\"control?.placeHolder\"\n          [type]=\"control?.type\"\n          [formControlName]=\"control?.name\"\n          [maxlength]=\"control?.validators.maxLength\"\n          [required]=\"control?.validators?.required\"\n          style=\"margin-top: 10px\"\n        />\n        <mat-icon\n          matSuffix\n          *ngIf=\"control?.type === 'password' || control?.showPasswordIcon\"\n          (click)=\"togglePasswordVisibility(control)\"\n          style=\"cursor: pointer\"\n        >\n          {{ control?.type === \"password\" ? \"visibility_off\" : \"visibility\" }}\n        </mat-icon>\n      </mat-form-field>\n\n      <mat-form-field *ngIf=\"control?.type === 'textarea'\" floatLabel=\"always\">\n        <mat-label>{{ control?.label }}</mat-label>\n        <textarea\n          matInput\n          [formControlName]=\"control?.name\"\n          [placeholder]=\"control?.placeHolder\"\n          [maxlength]=\"control?.validators?.maxLength\"\n          [required]=\"control?.validators?.required\"\n          style=\"margin-top: 10px\"\n        >\n        </textarea>\n      </mat-form-field>\n\n      <mat-form-field *ngIf=\"control?.type === 'select'\" floatLabel=\"always\">\n        <mat-label>{{ control?.label }}</mat-label>\n        <mat-select\n          [value]=\"control?.value\"\n          [formControlName]=\"control?.name\"\n          [required]=\"control?.validators?.required\"\n          [compareWith]=\"compareWith\"\n        >\n          <mat-option *ngFor=\"let option of control?.options\" [value]=\"option\">\n            {{ option.label }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n\n      <mat-form-field *ngIf=\"control?.type === 'chip'\" floatLabel=\"always\">\n        <mat-label>{{ control?.label }}</mat-label>\n        <lib-chip-input\n          [chipControl]=\"control\"\n          [formControlName]=\"control?.name\"\n        ></lib-chip-input>\n        <textarea\n          matInput\n          [formControlName]=\"control?.name\"\n          hidden\n          [required]=\"control?.validators?.required\"\n        ></textarea>\n      </mat-form-field>\n\n      <!-- <mat-form-field\n        *ngIf=\"control.type === 'date'\"\n        floatLabel=\"always\"\n        appearance=\"fill\"\n      >\n        <mat-label>{{ control?.label }}</mat-label>\n        <input\n          matInput\n          [ngxMatDatetimePicker]=\"picker\"\n          [formControlName]=\"control.name\"\n          [value]=\"control.value\"\n          [min]=\"\n            control.name === dependedChild ? dependedChildDate : currentDate\n          \"\n          [max]=\"maxDate\"\n          (dateChange)=\"dateSelected($event, control)\"\n          (click)=\"dateInputClick(control, picker)\"\n        />\n        <mat-datepicker-toggle matSuffix [for]=\"$any(picker)\">\n        </mat-datepicker-toggle>\n        <ngx-mat-datetime-picker\n          #picker\n          [showSpinners]=\"showSpinners\"\n          [showSeconds]=\"showSeconds\"\n          [stepHour]=\"stepHour\"\n          [stepMinute]=\"stepMinute\"\n          [stepSecond]=\"stepSecond\"\n          [touchUi]=\"touchUi\"\n          [enableMeridian]=\"enableMeridian\"\n        >\n        </ngx-mat-datetime-picker>\n      </mat-form-field> -->\n\n      <mat-form-field *ngIf=\"control?.type === 'range'\" floatLabel=\"always\">\n        <mat-label>{{ control?.label }}</mat-label>\n        <mat-slider\n          style=\"width: 100%\"\n          [min]=\"control?.min\"\n          [max]=\"control?.max\"\n          [step]=\"control?.step\"\n          [discrete]=\"control?.showThumbLabel\"\n        >\n        <input matSliderThumb [formControlName]=\"control?.name\" [value]=\"control?.value\">\n        </mat-slider>\n        <textarea matInput [formControlName]=\"control?.name\" hidden></textarea>\n      </mat-form-field>\n\n      <mat-form-field *ngIf=\"control?.type === 'rating'\" floatLabel=\"always\">\n        <mat-label>{{ control?.label }}</mat-label>\n        <lib-star-rating\n          [formControlName]=\"control.name\"\n          [label]=\"control.label\"\n          [starsCount]=\"control.noOfstars\"\n        ></lib-star-rating>\n        <textarea matInput [formControlName]=\"control?.name\" hidden></textarea>\n      </mat-form-field>\n\n      <mat-form-field *ngIf=\"control?.type === 'checkbox'\" floatLabel=\"always\">\n        <mat-label>{{ control?.label }}</mat-label>\n        <input matInput [formControlName]=\"control?.name\" hidden />\n        <lib-checkbox-input\n          [checkboxControl]=\"control\"\n          [formControlName]=\"control?.name\"\n        ></lib-checkbox-input>\n      </mat-form-field>\n\n      <mat-form-field *ngIf=\"control?.type === 'radio'\" floatLabel=\"always\">\n        <mat-label>{{ control?.label }}</mat-label>\n        <input matInput [formControlName]=\"control?.name\" hidden />\n        <lib-radio-input\n          [radioControl]=\"control\"\n          [formControlName]=\"control?.name\"\n        ></lib-radio-input>\n      </mat-form-field>\n\n      <mat-form-field *ngIf=\"control?.type == 'toggle'\" floatLabel=\"always\">\n        <mat-label>{{ control?.label }}</mat-label>\n        <mat-slide-toggle\n          [formControlName]=\"control?.name\"\n          [checked]=\"control?.value\"\n          [required]=\"control?.validators?.required\"\n          style=\"margin-top: 10px\"\n        >\n        </mat-slide-toggle>\n        <textarea\n          matInput\n          [formControlName]=\"control?.name\"\n          hidden\n          [required]=\"control?.validators?.required\"\n        ></textarea>\n      </mat-form-field>\n\n      <mat-error\n        *ngIf=\"\n          myForm.get(control?.name)?.touched &&\n          myForm.get(control?.name)?.invalid\n        \"\n      >\n        <div\n          class=\"error-message\"\n          *ngIf=\"\n            control?.errorMessage[\n              ((myForm.get(control.name)?.errors | keyvalue) || [])[0].key\n            ];\n            else genericErrorMessage\n          \"\n        >\n          <mat-icon class=\"error-icon\" matPrefix>error_outline</mat-icon>\n          {{\n            control?.errorMessage[\n              ((myForm.get(control.name)?.errors | keyvalue) || [])[0].key\n            ]\n          }}\n        </div>\n        <ng-template #genericErrorMessage>\n          <div class=\"error-message\">\n            <mat-icon class=\"error-icon\" matPrefix>error_outline</mat-icon>\n            Enter {{ control?.label }}\n          </div>\n        </ng-template>\n      </mat-error>\n    </div>\n  </form>\n</div>\n", styles: ["mat-form-field{width:100%}.error-message{display:flex;flex-direction:row;font-size:12px;margin-top:-10px}.error-icon{font-size:16px;width:20px;height:auto}::ng-deep .mat-form-field-appearance-fill .mat-form-field-flex{background-color:#fff}mat-label{font-size:20px;margin-bottom:10px}.mat-datepicker-content{box-shadow:0 2px 4px -1px #0003,0 4px 5px #00000024,0 1px 10px #0000001f;background-color:#fff;color:#000000de}.mat-calendar-body-selected{background-color:#007f51;color:#fff}.mat-calendar-body-cell-content{border:none!important}.mdc-text-field--filled:not(.mdc-text-field--disabled){background-color:#fff!important}.mdc-text-field--filled{background-color:#fff!important}\n"], dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i1.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { kind: "directive", type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i3.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "name", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly"], exportAs: ["matInput"] }, { kind: "component", type: i4.MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "directive", type: i4.MatLabel, selector: "mat-label" }, { kind: "directive", type: i4.MatError, selector: "mat-error, [matError]", inputs: ["id"] }, { kind: "directive", type: i4.MatPrefix, selector: "[matPrefix], [matIconPrefix], [matTextPrefix]", inputs: ["matTextPrefix"] }, { kind: "directive", type: i4.MatSuffix, selector: "[matSuffix], [matIconSuffix], [matTextSuffix]", inputs: ["matTextSuffix"] }, { kind: "component", type: i5.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "component", type: i6.MatSelect, selector: "mat-select", inputs: ["aria-describedby", "panelClass", "disabled", "disableRipple", "tabIndex", "hideSingleSelectionIndicator", "placeholder", "required", "multiple", "disableOptionCentering", "compareWith", "value", "aria-label", "aria-labelledby", "errorStateMatcher", "typeaheadDebounceInterval", "sortComparator", "id", "panelWidth"], outputs: ["openedChange", "opened", "closed", "selectionChange", "valueChange"], exportAs: ["matSelect"] }, { kind: "component", type: i7.MatOption, selector: "mat-option", inputs: ["value", "id", "disabled"], outputs: ["onSelectionChange"], exportAs: ["matOption"] }, { kind: "component", type: i8.MatSlideToggle, selector: "mat-slide-toggle", inputs: ["name", "id", "labelPosition", "aria-label", "aria-labelledby", "aria-describedby", "required", "color", "disabled", "disableRipple", "tabIndex", "checked", "hideIcon"], outputs: ["change", "toggleChange"], exportAs: ["matSlideToggle"] }, { kind: "component", type: i9.MatSlider, selector: "mat-slider", inputs: ["disabled", "discrete", "showTickMarks", "min", "color", "disableRipple", "max", "step", "displayWith"], exportAs: ["matSlider"] }, { kind: "directive", type: i9.MatSliderThumb, selector: "input[matSliderThumb]", inputs: ["value"], outputs: ["valueChange", "dragStart", "dragEnd"], exportAs: ["matSliderThumb"] }, { kind: "component", type: i10.ChipInputComponent, selector: "lib-chip-input", inputs: ["chipControl"] }, { kind: "component", type: i11.RadioInputComponent, selector: "lib-radio-input", inputs: ["radioControl"] }, { kind: "component", type: i12.CheckboxInputComponent, selector: "lib-checkbox-input", inputs: ["checkboxControl"] }, { kind: "component", type: i13.StarRatingComponent, selector: "lib-star-rating", inputs: ["starsCount", "label"] }, { kind: "pipe", type: i2.KeyValuePipe, name: "keyvalue" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.8", ngImport: i0, type: MainFormComponent, decorators: [{
            type: Component,
            args: [{ selector: 'dynamic-form', template: "<div>\n  <form [formGroup]=\"myForm\">\n    <div *ngFor=\"let control of formJson\">\n      <mat-form-field\n        *ngIf=\"control?.type === 'text' || control?.type === 'password'\"\n        floatLabel=\"always\"\n      >\n        <mat-label>{{ control?.label }}</mat-label>\n        <input\n          matInput\n          [placeholder]=\"control?.placeHolder\"\n          [type]=\"control?.type\"\n          [formControlName]=\"control?.name\"\n          [maxlength]=\"control?.validators.maxLength\"\n          [required]=\"control?.validators?.required\"\n          style=\"margin-top: 10px\"\n        />\n        <mat-icon\n          matSuffix\n          *ngIf=\"control?.type === 'password' || control?.showPasswordIcon\"\n          (click)=\"togglePasswordVisibility(control)\"\n          style=\"cursor: pointer\"\n        >\n          {{ control?.type === \"password\" ? \"visibility_off\" : \"visibility\" }}\n        </mat-icon>\n      </mat-form-field>\n\n      <mat-form-field *ngIf=\"control?.type === 'textarea'\" floatLabel=\"always\">\n        <mat-label>{{ control?.label }}</mat-label>\n        <textarea\n          matInput\n          [formControlName]=\"control?.name\"\n          [placeholder]=\"control?.placeHolder\"\n          [maxlength]=\"control?.validators?.maxLength\"\n          [required]=\"control?.validators?.required\"\n          style=\"margin-top: 10px\"\n        >\n        </textarea>\n      </mat-form-field>\n\n      <mat-form-field *ngIf=\"control?.type === 'select'\" floatLabel=\"always\">\n        <mat-label>{{ control?.label }}</mat-label>\n        <mat-select\n          [value]=\"control?.value\"\n          [formControlName]=\"control?.name\"\n          [required]=\"control?.validators?.required\"\n          [compareWith]=\"compareWith\"\n        >\n          <mat-option *ngFor=\"let option of control?.options\" [value]=\"option\">\n            {{ option.label }}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n\n      <mat-form-field *ngIf=\"control?.type === 'chip'\" floatLabel=\"always\">\n        <mat-label>{{ control?.label }}</mat-label>\n        <lib-chip-input\n          [chipControl]=\"control\"\n          [formControlName]=\"control?.name\"\n        ></lib-chip-input>\n        <textarea\n          matInput\n          [formControlName]=\"control?.name\"\n          hidden\n          [required]=\"control?.validators?.required\"\n        ></textarea>\n      </mat-form-field>\n\n      <!-- <mat-form-field\n        *ngIf=\"control.type === 'date'\"\n        floatLabel=\"always\"\n        appearance=\"fill\"\n      >\n        <mat-label>{{ control?.label }}</mat-label>\n        <input\n          matInput\n          [ngxMatDatetimePicker]=\"picker\"\n          [formControlName]=\"control.name\"\n          [value]=\"control.value\"\n          [min]=\"\n            control.name === dependedChild ? dependedChildDate : currentDate\n          \"\n          [max]=\"maxDate\"\n          (dateChange)=\"dateSelected($event, control)\"\n          (click)=\"dateInputClick(control, picker)\"\n        />\n        <mat-datepicker-toggle matSuffix [for]=\"$any(picker)\">\n        </mat-datepicker-toggle>\n        <ngx-mat-datetime-picker\n          #picker\n          [showSpinners]=\"showSpinners\"\n          [showSeconds]=\"showSeconds\"\n          [stepHour]=\"stepHour\"\n          [stepMinute]=\"stepMinute\"\n          [stepSecond]=\"stepSecond\"\n          [touchUi]=\"touchUi\"\n          [enableMeridian]=\"enableMeridian\"\n        >\n        </ngx-mat-datetime-picker>\n      </mat-form-field> -->\n\n      <mat-form-field *ngIf=\"control?.type === 'range'\" floatLabel=\"always\">\n        <mat-label>{{ control?.label }}</mat-label>\n        <mat-slider\n          style=\"width: 100%\"\n          [min]=\"control?.min\"\n          [max]=\"control?.max\"\n          [step]=\"control?.step\"\n          [discrete]=\"control?.showThumbLabel\"\n        >\n        <input matSliderThumb [formControlName]=\"control?.name\" [value]=\"control?.value\">\n        </mat-slider>\n        <textarea matInput [formControlName]=\"control?.name\" hidden></textarea>\n      </mat-form-field>\n\n      <mat-form-field *ngIf=\"control?.type === 'rating'\" floatLabel=\"always\">\n        <mat-label>{{ control?.label }}</mat-label>\n        <lib-star-rating\n          [formControlName]=\"control.name\"\n          [label]=\"control.label\"\n          [starsCount]=\"control.noOfstars\"\n        ></lib-star-rating>\n        <textarea matInput [formControlName]=\"control?.name\" hidden></textarea>\n      </mat-form-field>\n\n      <mat-form-field *ngIf=\"control?.type === 'checkbox'\" floatLabel=\"always\">\n        <mat-label>{{ control?.label }}</mat-label>\n        <input matInput [formControlName]=\"control?.name\" hidden />\n        <lib-checkbox-input\n          [checkboxControl]=\"control\"\n          [formControlName]=\"control?.name\"\n        ></lib-checkbox-input>\n      </mat-form-field>\n\n      <mat-form-field *ngIf=\"control?.type === 'radio'\" floatLabel=\"always\">\n        <mat-label>{{ control?.label }}</mat-label>\n        <input matInput [formControlName]=\"control?.name\" hidden />\n        <lib-radio-input\n          [radioControl]=\"control\"\n          [formControlName]=\"control?.name\"\n        ></lib-radio-input>\n      </mat-form-field>\n\n      <mat-form-field *ngIf=\"control?.type == 'toggle'\" floatLabel=\"always\">\n        <mat-label>{{ control?.label }}</mat-label>\n        <mat-slide-toggle\n          [formControlName]=\"control?.name\"\n          [checked]=\"control?.value\"\n          [required]=\"control?.validators?.required\"\n          style=\"margin-top: 10px\"\n        >\n        </mat-slide-toggle>\n        <textarea\n          matInput\n          [formControlName]=\"control?.name\"\n          hidden\n          [required]=\"control?.validators?.required\"\n        ></textarea>\n      </mat-form-field>\n\n      <mat-error\n        *ngIf=\"\n          myForm.get(control?.name)?.touched &&\n          myForm.get(control?.name)?.invalid\n        \"\n      >\n        <div\n          class=\"error-message\"\n          *ngIf=\"\n            control?.errorMessage[\n              ((myForm.get(control.name)?.errors | keyvalue) || [])[0].key\n            ];\n            else genericErrorMessage\n          \"\n        >\n          <mat-icon class=\"error-icon\" matPrefix>error_outline</mat-icon>\n          {{\n            control?.errorMessage[\n              ((myForm.get(control.name)?.errors | keyvalue) || [])[0].key\n            ]\n          }}\n        </div>\n        <ng-template #genericErrorMessage>\n          <div class=\"error-message\">\n            <mat-icon class=\"error-icon\" matPrefix>error_outline</mat-icon>\n            Enter {{ control?.label }}\n          </div>\n        </ng-template>\n      </mat-error>\n    </div>\n  </form>\n</div>\n", styles: ["mat-form-field{width:100%}.error-message{display:flex;flex-direction:row;font-size:12px;margin-top:-10px}.error-icon{font-size:16px;width:20px;height:auto}::ng-deep .mat-form-field-appearance-fill .mat-form-field-flex{background-color:#fff}mat-label{font-size:20px;margin-bottom:10px}.mat-datepicker-content{box-shadow:0 2px 4px -1px #0003,0 4px 5px #00000024,0 1px 10px #0000001f;background-color:#fff;color:#000000de}.mat-calendar-body-selected{background-color:#007f51;color:#fff}.mat-calendar-body-cell-content{border:none!important}.mdc-text-field--filled:not(.mdc-text-field--disabled){background-color:#fff!important}.mdc-text-field--filled{background-color:#fff!important}\n"] }]
        }], ctorParameters: () => [{ type: i1.FormBuilder }], propDecorators: { formJson: [{
                type: Input
            }], picker: [{
                type: ViewChild,
                args: ['picker']
            }] } });
//# sourceMappingURL=data:application/json;base64,